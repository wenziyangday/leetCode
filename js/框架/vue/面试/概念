1.proxy 替代 Object.defineProperty
  Object.defineProperty 问题：
    不能监听数组变化
    必须遍历对象的每一个属性
    必须深层遍历嵌套的对象

  proxy新加入的规范
    针对对象：针对的是整个对象，而非其中的一个属性，所以不需要进行Object.keys()遍历。
    支持数组：Proxy不需要对数组的方法进行重载，省去众多的hack，较少代码量就是减少了维护成本，而且标准就是最好的

    proxy的第二个参数可以用13中拦截方法，这比起Object.defineProperty更加丰富
    Proxy作为新标准受到浏览器厂商的关注和性能优化，而Object.defineProperty()是一个已有的老方法

2.vue?
  用于创建用户界面的开源JavaScript框架，也是一个创建单页应用的web应用框架
  vue 是一套用于构建用户界面的渐进式(强制主张最少)mvvm框架
  vue 包含了声明式渲染、组件化系统、客户端路由、大规模状态管理、构建工具、数据持久化、跨平台支持等
  vue 的核心只关注MVC模式的视图层，且由于渐进式的特性，vue便于与第三方库或既有项目整合。

  Vue.js 实现了一套声明式渲染引擎，
  并在runtime或者预编译时将声明式的模板编译成渲染函数，
  挂载在观察者 Watcher 中，在渲染函数中（touch），
  响应式系统使用响应式数据的getter方法对观察者进行依赖收集（Collect as Dependency），使用响应式数据的setter方法通知（notify）所有观察者进行更新，
  此时观察者 Watcher 会触发组件的渲染函数（Trigger re-render），组件执行的 render 函数，生成一个新的 Virtual DOM Tree，
  此时 Vue 会对新老 Virtual DOM Tree 进行 Diff，
  查找出需要操作的真实 DOM 并对其进行更新。

3.双向绑定 & 单项绑定
  双向绑定：
    数据变，视图变；视图变，数据变

    组成部分：
      数据层（model）：应用的数据及业务逻辑
      视图层（view）：应用的展示效果，各类UI组件
      业务逻辑层（VueModel）：框架封装的核心，负责将数据和视图关联起来

      mvvm这里的控制层的核心功能便是数据双向绑定

    VueModel：
      职责：
        数据变化更新视图，
        视图变化更新数据

      组成：
        监听器（Observer）：对所有的数据的属性进行监听
        解析器（Compiler）：对每个元素节点的指令进行扫描和解析，根据指令末班替换数据，以及绑定相应的更新函数

  单项绑定：
    数据变，视图变；视图变，数据不变

  手动实现双向绑定 TODO

4.v-show 和 v-if
  diff：
    控制手段：
      v-show：css-display：none（dom元素真实存在）
      v-if：将dom元素整个添加或删除，来控制元素的显示

    编译过程：
      v-if 切换存在一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；
      v-show 只是简单的基于css的切换

    编译条件：
      v-if 是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。只有渲染条件为假时，并不做操作，直到为真才渲染

      v-show 由false变为true的时候不会触发组件的生命周期
      v-if  由false变为true的时候，触发组件的beforeCreate、create、beforeMount、mounted钩子，由true变为false的时候触发组件的beforeDestory、destoryed方法

    性能消耗：
      v-if有更高的切换消耗；v-show有更高的初始渲染消耗；

    原理分析：

      大致流程：
       将模板template转为ast结构的JS对象
       用ast得到的JS对象拼装render和staticRenderFns函数
       render和staticRenderFns函数被调用后生成虚拟VNODE节点，该节点包含创建DOM节点所需信息
       vm.patch函数通过虚拟DOM算法利用VNODE节点创建真实DOM节点

    使用场景：
       如果需要非常频繁地切换，则使用 v-show 较好
       如果在运行时条件很少改变，则使用 v-if 较好

5.Vue实例挂载（初始化Vue实例/vue实例化）的过程

  new Vue的时候调用会调用_init方法
    定义 $set、 $get 、$delete、$watch 等方法
    定义 $on、$off、$emit、$off 等事件
    定义 _update、$forceUpdate、$destroy生命周期

  调用$mount进行页面的挂载
  挂载的时候主要是通过mountComponent方法
  定义updateComponent更新函数
  执行render生成虚拟DOM
  _update将虚拟DOM生成真实DOM结构，并且渲染到页面中

6.v-if 和 v-for
  首先 v-for的优先级比v-if 高
    同时用在同一个元素上，带来性能方面的浪费（每次渲染都会先循环再进行条件判断）
  如果避免出现这种情况，则在外层嵌套template（页面渲染不生成dom节点），在这一层进行v-if判断，然后在内部进行v-for循环

7.首屏渲染（优化）
  入手：
    网络延时问题
    资源文件体积是否过大
    资源是否重复发送请求去加载了
    加载脚本的时候，渲染内容堵塞了

  解决方案：
    减小入口文件积
    静态资源本地缓存
    UI框架按需加载
    图片资源的压缩
    组件重复打包
    开启GZip压缩
    使用SSR

8.vue 对象添加属性 页面不刷新 （Object.defineProperty 无法进行深层次的数据监听）
  Vue.set 少量对象属性变更，可以考虑使用
  Object.assign 对于多个对象属性的增加，要使用
    直接进行合并 是无法进行页面刷新的，需要重新建立一个对象
    this.someObject = Object.assign({},this.someObject,{newProperty1:1,newProperty2:2 ...})
  Vue.$forceUpdated 强制更新（一般情况下不建议使用）

9.组件和插件
  组件：
    组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在Vue中每一个.vue文件都可以视为一个组件
    优势：
      降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，例如输入框，可以替换为日历、时间、范围等组件作具体的实现
      调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，
        是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单
      提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级

  插件：
    插件通常用来为 Vue 添加全局功能

    添加全局方法或者属性。如: vue-custom-element
    添加全局资源：指令/过滤器/过渡等。如 vue-touch、
    通过全局混入来添加一些组件选项。如 vue-router
    添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。
    一个库，提供自己的 API，同时提供上面提到的一个或多个功能。如 vue-router

  diff：
    编写形式
      组件：
        每一个.vue文件我们都可以看成是一个组件（创建一个vue文件）
      插件：
        vue插件的实现应该暴露一个 install 方法。这个方法的第一个参数是 Vue 构造器，第二个参数是一个可选的选项对象
        MyPlugin.install = function (Vue, options) {
          // 1. 添加全局方法或 property
          Vue.myGlobalMethod = function () {
            // 逻辑...
          }
          // 2. 添加全局资源
          Vue.directive('my-directive', {
            bind (el, binding, vnode, oldVnode) {
              // 逻辑...
            }
            ...
          })
          // 3. 注入组件选项
          Vue.mixin({
            created: function () {
              // 逻辑...
            }
            ...
          })
          // 4. 添加实例方法
          Vue.prototype.$myMethod = function (methodOptions) {
            // 逻辑...
          }
        }

    注册形式
      组件：
        vue组件注册主要分为全局注册与局部注册
          全局注册通过Vue.component方法，第一个参数为组件的名称，第二个参数为传入的配置项
            Vue.component('my-component-name', { /* ... */ })
          局部注册只需在用到的地方通过components属性注册一个组件
            const component1 = {...} // 定义一个组件
            export default {
            	components:{
            		component1   // 局部注册
            	}
            }

      插件：
        插件的注册通过Vue.use()的方式进行注册（安装），第一个参数为插件的名字，第二个参数是可选择的配置项
        Vue.use(插件名字,{ /* ... */} )
        注意的是：
        注册插件的时候，需要在调用 new Vue() 启动应用之前完成
        Vue.use会自动阻止多次注册相同插件，只会注册一次

      使用场景：
        组件 (Component) 是用来构成你的 App 的业务模块，它的目标是 App.vue
        插件 (Plugin) 是用来增强你的技术栈的功能模块，它的目标是 Vue 本身
        简单来说，插件就是指对Vue的功能的增强或补充

10.通讯方式
  父子组件
  兄弟组件
  祖孙和后代组件
  非关系组件

  通信方式：
    props传递
      适用场景：
        状态有父级决定，子组件只需要调用父级的方法就可以了，子组件不需要维护自身状态

    $emit触发自定义事件
      这里的emit出来的事件和父级接收事件名称必须一致（但是在vue3 好像可以内部使用驼峰，外面是分割线）
      适用场景：
        子组件将数据（可以是自身状态、也可以是父级状态--子组件处理的）传递给父组件，
        子组件通过$emit触发自定义事件，$emit第二个参数为传递的数值
        父组件绑定监听器获取到子组件传递过来的参数

    使用ref
      tips:
        通过refs 调用方法时，子组件中的函数不能使用箭头函数，使用箭头函数会导致this指向不明

    eventBus：
      使用场景：兄弟组件传值
      创建一个中央时间总线EventBus
      兄弟组件通过$emit触发自定义事件，$emit第二个参数为传递的数值
      另一个兄弟组件通过$on监听自定义事件

    $parent或者$root
      TODO 创建一个vue2 的项目然后实现

      通过共同祖辈$parent或者$root搭建通信侨联
      兄弟组件
        this.$parent.on('add',this.add)
      另一个兄弟组件
        this.$parent.emit('add')

    attrs 与 listeners
      适用场景：祖先传递数据给子孙
      设置批量向下传属性$attrs和 $listeners
      包含了父级作用域中不作为 prop 被识别 (且获取) 的特性绑定 ( class 和 style 除外)。
      可以通过 v-bind="$attrs" 传⼊内部组件

    Provide 与 Inject
      在祖先组件定义provide属性，返回传递的值
      在后代组件通过inject接收组件传递过来的值

    Vuex
      适用场景: 复杂关系的组件数据传递
      Vuex作用相当于一个用来存储共享变量的容器
      state用来存放共享变量的地方
      getter，可以增加一个getter派生状态，(相当于store中的计算属性），用来获得共享变量的值
      mutations用来存放修改state的方法。
      actions也是用来存放修改state的方法，不过action是在mutations的基础上进行。常用来做一些异步操作

    最后：
      父子关系的组件数据传递选择 props  与 $emit进行传递，也可选择ref
      兄弟关系的组件数据传递可选择$bus，其次可以选择$parent进行传递
      祖先与后代组件数据传递可选择attrs与listeners或者 Provide与 Inject
      复杂关系的组件数据传递可以通过vuex存放共享的变量

11.NextTick
  在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM
    我们可以理解成，Vue 在更新 DOM 时是异步执行的。当数据发生变化，Vue将开启一个异步更新队列，视图需要等队列中所有数据变化完成之后，
    再统一进行更新

  $nextTick() 会返回一个 Promise 对象，可以是用async/await完成相同作用的事情

  把回调函数放入callbacks等待执行
  将执行函数放到微任务或者宏任务中
  事件循环到了微任务或者宏任务，执行函数依次执行callbacks中的回调

  使用场景：
    如果想要在修改数据后立刻得到更新后的DOM结构，可以使用Vue.nextTick()
    第一个参数为：回调函数（可以获取最近的DOM结构）
    第二个参数为：执行函数上下文

12.mixin 类似于 自定义hooks 拥有相同的计算逻辑但是没有共享操作后数据
  mixin（混入），提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。
  本质其实就是一个js对象，它可以包含我们组件中任意功能选项，如data、components、methods 、created、computed等等
  我们只要将共用的功能以对象的方式传入 mixins选项中，当组件使用 mixins对象时所有mixins对象的选项都将被混入该组件本身的选项中来

  局部混入
    定义一个mixin对象，有组件options的data、methods属性

  全局混入
    通过Vue.mixin()进行全局的混入
    使用全局混入需要特别注意，因为它会影响到每一个组件实例（包括第三方组件）
    PS：全局混入常用于插件的编写
    tips:
      当组件存在与mixin对象相同的选项的时候，进行递归合并的时候组件的选项会覆盖mixin的选项,
      多个mixin中相同的部分 mixins数组中的后续会覆盖前面的部分
      但是如果相同选项为生命周期钩子的时候，会合并成一个数组，先执行mixin的钩子，再执行组件的钩子(mixins 中的生命周期优于 组件中的生命周期)

  使用场景：
    在日常的开发中，我们经常会遇到在不同的组件中经常会需要用到一些相同或者相似的代码，这些代码的功能相对独立
    这时，可以通过Vue的mixin功能将相同或者相似的代码提出来

  mixins源码分析：
    优先递归处理 mixins
    先遍历合并parent 中的key，调用mergeField方法进行合并，然后保存在变量options
    再遍历 child，合并补上 parent 中没有的key，调用mergeField方法进行合并，保存在变量options
    通过 mergeField 函数进行了合并

13.vue中数据合并策略
  替换型
    替换型合并有props、methods、inject、computed
    同名的props、methods、inject、computed会被后来者代替

  合并型
    和并型合并有：data

    mergeData函数遍历了要合并的 data 的所有属性，然后根据不同情况进行合并：
      当目标 data 对象不包含当前属性时，调用 set 方法进行合并（set方法其实就是一些合并重新赋值的方法）
      当目标 data 对象包含当前属性并且当前值为纯对象时，递归合并当前对象值，这样做是为了防止对象存在新增属性

  队列型
    队列性合并有：全部生命周期和watch
    生命周期钩子和watch被合并为一个数组，然后正序遍历一次执行

  叠加型
    叠加型合并有：component、directives、filters
    叠加型主要是通过原型链进行层层的叠加

  总结：
    替换型策略有props、methods、inject、computed，就是将新的同名参数替代旧的参数
    合并型策略是data, 通过set方法进行合并和重新赋值
    队列型策略有生命周期函数和watch，原理是将函数存入一个数组，然后正序遍历依次执行
    叠加型有component、directives、filters，通过原型链进行层层的叠加

14.slot
  在HTML中 slot 元素 ，作为 Web Components 技术套件的一部分，是Web组件内的一个占位符
  该占位符可以在后期使用自己的标记语言填充
  <slot> 元素作为组件模板之中的内容分发插槽。<slot> 元素自身将被替换。

  使用场景：
    通过插槽可以让用户可以拓展组件，去更好地复用组件和对其做定制化处理
    如果父组件在使用到一个复用组件的时候，获取这个组件在不同的地方有少量的更改，如果去重写组件是一件不明智的事情
    通过slot插槽向组件内部指定位置传递内容，完成这个复用组件在不同场景的应用
    比如布局组件、表格列、下拉选、弹框显示内容等

  分类：
    默认插槽
      子组件用<slot>标签来确定渲染的位置，标签里面可以放DOM结构，当父组件使用的时候没有往插槽传入内容，标签内DOM结构就会显示在页面
      父组件在使用的时候，直接在子组件的标签内写入内容即可

    具名插槽
      子组件用name属性来表示插槽的名字，不传为默认插槽
      父组件中在使用时在默认插槽的基础上加上slot属性，值为子组件插槽name属性值

    作用域插槽
      子组件在作用域上绑定属性来将子组件的信息传给父组件使用，这些属性会被挂在父组件v-slot接受的对象上
      父组件中在使用时通过v-slot:（简写：#）获取子组件的信息，在内容中使用

  总结：
    v-slot属性只能在<template>上使用，但在只有默认插槽时可以在组件标签上使用
    默认插槽名为default，可以省略default直接写v-slot
    缩写为#时不能不写参数，写成#default
    可以通过解构获取v-slot={user}，还可以重命名v-slot="{user: newName}"和定义默认值v-slot="{user = '默认值'}"

15.Vue.observable是什么？
  Observable 翻译过来我们可以理解成可观察的
  Vue.observable，让一个对象变成响应式数据。Vue 内部会用它来处理 data 函数返回的对象
  返回的对象可以直接用于渲染函数和计算属性内，并且会在发生变更时触发相应的更新。也可以作为最小化的跨组件状态存储器

16.key 是什么？作用？原理？
  key是给每一个vnode的唯一id，也是diff的一种优化策略，可以根据key，更准确， 更快的找到对应的vnode节点

  v-for 中的key：
    如果不用key，Vue会采用就地复地原则：最小化element的移动，并且会尝试尽最大程度在同适当的地方对相同类型的element，做patch或者reuse。
    如果使用了key，Vue会根据keys的顺序记录element，曾经拥有了key的element如果不再出现的话，会被直接remove或者destoryed

  用+new Date()生成的时间戳作为key，手动强制触发重新渲染
    当拥有新值的rerender作为key时，拥有了新key的Comp出现了，那么旧key Comp会被移除，新key Comp触发渲染

  当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，
  Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素

17.就地复用 TODO
  由于vue源码中判断一个虚拟DOM节点是否可复用，是指就地复用的是那些没有变化的元素，
    取决于tag与key两个条件，两个都相同，得以复用；两个都不同，不复用

18.keep-alive
  keep-alive是vue中的内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染DOM
  keep-alive 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们

  keep-alive可以设置以下props属性：
    include - 字符串或正则表达式。只有名称匹配的组件会被缓存
    exclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存
    max - 数字。最多可以缓存多少组件实例

  设置了 keep-alive 缓存的组件，会多出两个生命周期钩子（activated与deactivated）：
    首次进入组件时：beforeRouteEnter > beforeCreate > created> mounted > activated > ... ... > beforeRouteLeave > deactivated
    再次进入组件时：beforeRouteEnter > activated > ... ... > beforeRouteLeave > deactivated

  使用场景：
    使用原则：当我们在某些场景下不需要让页面重新加载时我们可以使用keepalive
    举个栗子:
      当我们从首页–>列表页–>商详页–>再返回，这时候列表页应该是需要keep-alive
      从首页–>列表页–>商详页–>返回到列表页(需要缓存)–>返回到首页(需要缓存)–>再次进入列表页(不需要缓存)，这时候可以按需来控制页面的keep-alive
      在路由中设置keepAlive属性判断是否需要缓存

  缓存后如何获取数据：
    beforeRouteEnter：
      每次组件渲染的时候，都会执行beforeRouteEnter
      beforeRouteEnter(to, from, next){
          next(vm=>{
              console.log(vm)
              // 每次进入路由执行
              vm.getData()  // 获取数据
          })
      },

    activated：
      在keep-alive缓存的组件被激活的时候，都会执行activated钩子
      activated(){
      	  this.getData() // 获取数据
      },

      注意：服务器端渲染期间activated不被调用

19.修饰符
  在Vue中，修饰符处理了许多DOM事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理


  表单修饰符
    lazy
      在我们填完信息，光标离开标签的时候，才会将值赋予给value，也就是在change事件之后再进行信息同步
    trim
      自动过滤用户输入的首空格字符，而中间的空格不会过滤
    number
      自动将用户的输入值转为数值类型，但如果这个值无法被parseFloat解析，则会返回原来的值

  事件修饰符
    使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。
    因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击
    stop
      阻止了事件冒泡，相当于调用了event.stopPropagation方法
    prevent
      阻止了事件的默认行为，相当于调用了event.preventDefault方法
    self
      只当在 event.target 是当前元素自身时触发处理函数
    once
      绑定了事件以后只能触发一次，第二次就不会触发
    capture
      使事件触发从包含这个元素的顶层开始往下触发
    passive
      在移动端，当我们在监听元素滚动事件的时候，会一直触发onscroll事件会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给onscroll事件整了一个.lazy修饰符
      tips:
        不要把 .passive 和 .prevent 一起使用,因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。
        passive 会告诉浏览器你不想阻止事件的默认行为
    native
      让组件变成像html内置标签那样监听根元素的原生事件，否则组件上使用 v-on 只会监听自定义事件

  鼠标按键修饰符
    left 左键点击
    right 右键点击
    middle 中键点击

  键值修饰符
    普通键（enter、tab、delete、space、esc、up...）
    系统修饰键（ctrl、alt、meta、shift...）

  v-bind修饰符
    sync
      能对props进行一个双向绑定
      tips:
        使用sync的时候，子组件传递的事件名格式必须为update:value，其中value必须与子组件中props中声明的名称完全一致
        注意带有 .sync 修饰符的 v-bind 不能和表达式一起使用
        将 v-bind.sync 用在一个字面量的对象上，例如 v-bind.sync=”{ title: doc.title }”，是无法正常工作的

    prop
      设置自定义标签属性，避免暴露数据，防止污染HTML结构

    camel
      将命名变为驼峰命名法，如将view-Box属性名转换为 viewBox

20.virtual DOM
  它只是一层对真实DOM的抽象，以JavaScript 对象 (VNode 节点) 作为基础的树，
  用对象的属性来描述节点，最终可以通过一系列操作使这棵树映射到真实环境上
  在Javascript对象中，虚拟DOM 表现为一个 Object 对象。并且最少包含标签名 (tag)、属性 (attrs) 和子元素对象 (children) 三个属性，
  不同框架对这三个属性的名命可能会有差别
  创建虚拟DOM就是为了更好将虚拟的节点渲染到页面视图中，所以虚拟DOM对象的节点与真实DOM的属性一一照应

  通过VNode，vue可以对这颗抽象树进行创建节点,删除节点以及修改节点的操作， 经过diff算法得出一些需要修改的最小单位,再更新视图，减少了dom操作，
  提高了性能

  why?
    很多人认为虚拟 DOM 最大的优势是 diff 算法，减少 JavaScript 操作真实 DOM 的带来的性能消耗。
    虽然这一个虚拟 DOM 带来的一个优势，但并不是全部。
    虚拟 DOM 最大的优势在于抽象了原本的渲染过程，实现了跨平台的能力，而不仅仅局限于浏览器的 DOM，可以是安卓和 IOS 的原生组件，
    可以是近期很火热的小程序，也可以是各种GUI

  how do you realise ? TODO

21.封装 axios
  why ？
    项目增大为了更好的、同一的 控制 网络请求
    请求头，超时时间、错误处理，不同开发环境的环境变量等等
    请求拦截（统一的请求头入参）、响应拦截（统一的错误处理）

22.大型项目的组件和结构目录划分
  文件夹和文件夹内部文件的语义一致性
  单一入口/出口
  就近原则，紧耦合的文件应该放到一起，且应以相对路径引用
  公共的文件应该以绝对路径的方式从根目录引用
  /src 外的文件不应该被引入

23.vue项目中的错误处理
  错误来源：
    网络错误：
      网络请求axios中的响应拦截器interceptor.response 进行统一处理
    代码中的错误：
      全局设置错误处理：
        Vue.config.errorHandler = function(err, vm, info) {}

24.vuex
  Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。
  它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。

  state:
    Vuex 使用单一状态树——是的，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (SSOT)”而存在。
    这也意味着，每个应用将仅仅包含一个 store 实例。
    单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。
    State属性是Vuex的单一状态树

  getters:
    有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数
    Getter类似于Vue的 computed 对象。是根据业务逻辑来处理State，使得生成业务所需的属性。

  Mutation:
    更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。
    Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。

    Mutation是唯一用来更改Vuex中状态的方法。

  Action:
    Action 类似于 mutation，不同在于：
      Action 提交的是 mutation，而不是直接变更状态。
      Action 可以包含任意异步操作。
    Action是用来解决异步操作而产生的，它提交的是Mutation。

  module:
    由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。
    为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。
    每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割

    Module是将Vuex模块化的对象，目的是更好的维护。

25.vuex 辅助函数：
  mapState、mapGetters、mapMutations、mapActions
  mapState:把state属性映射到computed身上
  mapMutations：把mutations里面的方法映射到methods中
  mapGetters:把getters属性映射到computed身上
  mapActions:把actions里面的方法映射到methods中

26.vue data 中的引用类型数据修改，视图是否更新？
  不会更新
  当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，
    Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。
    Object.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是为什么 Vue 不支持 IE8 以及更低版本浏览器的原因。
    用户看不到 getter/setter，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。
    这里需要注意的问题是浏览器控制台在打印数据对象时 getter/setter 的格式化并不同，所以你可能需要安装 vue-devtools 来获取更加友好的检查接口。
    每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新。

  Vue.set
  Vue.delete
  或者进行属性或者对象的替换
  数组：
    push()
    pop()
    shift()
    unshift()
    splice()
    sort()
    reverse()

27.自定义指令 玩法和自定义插件或者全局组件

  bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置
  inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)
  update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新
  componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用
  unbind：只调用一次，指令与元素解绑时调用

  常用场景：
    防抖、节流、拖拽指令、页面水印、权限校验


28.$router 和 $route
  $router:
    是 router 实例
    通过 this.$router 访问路由器, 相当于获取了整个路由文件，在$router.option.routes中，或查看到当前项目的整个路由结构 具有实例方法

  $route:
    当前激活的路由信息对象。这个属性是只读的，里面的属性是 immutable (不可变) 的，不过可以 watch (监测变化) 它。
    通过 this.$route 访问的是当前路由，获取和当前路由有关的信息

29.vue.set() 可以进行深层次的更细的原因：vue 中对于复杂对象更新无法引动更新的原因 （响应式原理）

