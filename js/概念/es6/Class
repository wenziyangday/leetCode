Class 的基本语法：
  ES6 的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，
  新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。

  类的数据类型就是函数，类本身就指向构造函数
    prototype对象的constructor()属性，直接指向“类”的本身，这与 ES5 的行为是一致的。
    Point === Point.prototype.constructor // true

  在类的实例上面调用方法，其实就是调用原型上的方法
    b.constructor === B.prototype.constructor // true

  类的内部所有定义的方法，都是不可枚举的（non-enumerable） // 这一点与 ES5 的行为不一致

  constructor 方法:
    constructor()方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。
    一个类必须有constructor()方法，如果没有显式定义，一个空的constructor()方法会被默认添加。

    constructor()方法默认返回实例对象（即this），完全可以指定返回另外一个对象。
    class Foo {
      constructor() {
        return Object.create(null);
      }
    }

    new Foo() instanceof Foo // false

  类的实例:
    生成类的实例的写法，与 ES5 完全一样，也是使用new命令。
    前面说过，如果忘记加上new，像函数那样调用Class，将会报错。
    与 ES5 一样，类的所有实例共享一个原型对象。

    通过实例的__proto__属性为“类”添加方法
      使用实例的__proto__属性改写原型，必须相当谨慎，不推荐使用，因为这会改变“类”的原始定义，影响到所有实例

  取值函数（getter）和存值函数（setter）:
    与 ES5 一样，在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。

    存值函数和取值函数是设置在属性的 Descriptor 对象上的:
      Object.getOwnPropertyDescriptor(P.prototype, 'name')

  属性表达式:
    类的属性名，可以采用表达式

  Class 表达式:
    采用 Class 表达式，可以写出立即执行的 Class。

  tips:
    1）严格模式:
      类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。
      只要你的代码写在类或模块之中，就只有严格模式可用。
      考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式。

    2）不存在提升
      类不存在变量提升（hoist），这一点与 ES5 完全不同。
      否则会报错。

    3）name 属性
      ES6 的类只是 ES5 的构造函数的一层包装，所以函数的许多特性都被Class继承，包括name属性。
      name属性总是返回紧跟在class关键字后面的类名，但是对于表达式的类名就是表达式声明的变量的名称。

    4）Generator 方法
      如果某个方法之前加上星号（*），就表示该方法是一个 Generator 函数。
      for...of循环会自动调用这个遍历器

    5）this 的指向
      类的方法内部如果含有this，它默认指向类的实例。
      但是，必须非常小心，一旦单独使用该方法（不是直接跟在实例之后使用，此时this指向undefined（解构使用）），很可能报错。
      解决方法是：
        在构造方法中绑定this，这样就不会找不到print方法了。
        class Logger {
          constructor() {
            this.printName = this.printName.bind(this);
          }

          // ...
        }

        使用箭头函数：箭头函数内部的this总是指向定义时所在的对象
          class Obj {
            constructor() {
              this.getThis = () => this;
            }
          }

        使用Proxy，获取方法的时候，自动绑定this：
          function selfish (target) {
            const cache = new WeakMap();
            const handler = {
              get (target, key) {
                const value = Reflect.get(target, key);
                if (typeof value !== 'function') {
                  return value;
                }
                if (!cache.has(value)) {
                  cache.set(value, value.bind(target));
                }
                return cache.get(value);
              }
            };
            const proxy = new Proxy(target, handler);
            return proxy;
          }

          const logger = selfish(new Logger());

    静态方法：
      类相当于实例的原型，所有在类中定义的方法，都会被实例继承。
      如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。

      tips:
        如果静态方法包含this关键字，这个this指的是类，而不是实例
        父类的静态方法，可以被子类继承。
        静态方法也是可以从super对象上调用的。

    实例属性的新写法:
      实例属性除了定义在constructor()方法里面的this上面，也可以定义在类的最顶层。
      class foo {
        bar = 'hello';
        baz = 'world';

        constructor() {
          // ...
        }
      }
      优势：
        所有实例对象自身的属性都定义在类的头部，看上去比较整齐，一眼就能看出这个类有哪些实例属性。

    静态属性：
      静态属性指的是 Class 本身的属性，即Class.propName，而不是定义在实例对象（this）上的属性。
      因为 ES6 明确规定，Class 内部只有静态方法，没有静态属性。现在有一个提案提供了类的静态属性，写法是在实例属性的前面，加上static关键字。

    私有方法和私有属性：
      现有的解决方案：
        私有方法和私有属性，是只能在类的内部访问的方法和属性，外部不能访问。这是常见需求，有利于代码的封装，但 ES6 不提供，只能通过变通方法模拟实现。
          一种做法是在命名上加以区别：
            class Widget {

              // 公有方法
              foo (baz) {
                this._bar(baz);
              }

              // 私有方法
              _bar(baz) {
                return this.snaf = baz;
              }

              // ...
            }

          另一种方法就是索性将私有方法移出类，因为类内部的所有方法都是对外可见的：
            class Widget {
              foo (baz) {
                bar.call(this, baz);
              }

              // ...
            }

            function bar(baz) {
              return this.snaf = baz;
            }

          还有一种方法是利用Symbol值的唯一性，将私有方法的名字命名为一个Symbol值：
            const bar = Symbol('bar');
            const snaf = Symbol('snaf');

            export default class myClass{

              // 公有方法
              foo(baz) {
                this[bar](baz);
              }

              // 私有方法
              [bar](baz) {
                return this[snaf] = baz;
              }

              // ...
            };

            说明：
              bar和snaf都是Symbol值，一般情况下无法获取到它们，因此达到了私有方法和私有属性的效果。但是也不是绝对不行，Reflect.ownKeys()依然可以拿到它们。

    in 运算符：
      使它也可以用来判断私有属性。
      in也可以跟this一起配合使用。
      try...catch结构可以用来判断是否存在某个私有属性
        类A并不存在私有属性#foo，所以try...catch报错了


    new.target 属性：
      new是从构造函数生成实例对象的命令。
      ES6 为new命令引入了一个new.target属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。
      如果构造函数不是通过new命令或Reflect.construct()调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数是怎么调用的。

      tips:
        Class 内部调用new.target，返回当前 Class。
        子类继承父类时，new.target会返回子类

      应用：
        利用这个特点，可以写出不能独立使用、必须继承后才能使用的类。

        class Shape {
          constructor() {
            if (new.target === Shape) {
              throw new Error('本类不能实例化');
            }
          }
        }

        class Rectangle extends Shape {
          constructor(length, width) {
            super();
            // ...
          }
        }
        var x = new Shape();  // 报错
        var y = new Rectangle(3, 4);  // 正确

    class 的继承：
      简介：
        Class 可以通过extends关键字实现继承，让子类继承父类的属性和方法。extends 的写法比 ES5 的原型链继承，要清晰和方便很多。

        ES6 规定，子类必须在constructor()方法中调用super()，否则就会报错。
        这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，添加子类自己的实例属性和方法。
        如果不调用super()方法，子类就得不到自己的this对象。

        为什么子类的构造函数，一定要调用super()？
          原因就在于 ES6 的继承机制，与 ES5 完全不同。
          ES5 的继承机制，是先创造一个独立的子类的实例对象，然后再将父类的方法添加到这个对象上面，即“实例在前，继承在后”。
          ES6 的继承机制，则是先将父类的属性和方法，加到一个空的对象上面，然后再将该对象作为子类的实例，即“继承在前，实例在后”。
          这就是为什么 ES6 的继承必须先调用super()方法，因为这一步会生成一个继承父类的this对象，没有这一步就无法继承父类

        tips:
          这意味着新建子类实例时，父类的构造函数必定会先运行一次。
          在子类的构造函数中，只有调用super()之后，才可以使用this关键字，否则会报错。
            这是因为子类实例的构建，必须先完成父类的继承，只有super()方法才能让子类实例继承父类。


        子类无法继承父类的私有属性，或者说，私有属性只能在定义它的 class 里面使用。
        如果父类定义了私有属性的读写方法(暴露私有属性和方法的方法)，子类就可以通过这些方法，读写私有属性

      Object.getPrototypeOf()：
        Object.getPrototypeOf()方法可以用来从子类上获取父类。
        可以使用这个方法判断，一个类是否继承了另一个类。

      super 关键字：
        super这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。

        第一种情况，super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数。
          class A {}

          class B extends A {
            constructor() {
              super();
            }
          }

        此时super()等价于 A.prototype.constructor.call(this)
        作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错。

        第二种情况，super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。
          class A {
            p() {
              return 2;
            }
          }

          class B extends A {
            constructor() {
              super();
              console.log(super.p()); // 2
            }
          }

          let b = new B();

          子类B当中的super.p()，就是将super当作一个对象使用。
            这时，super在普通方法之中，指向A.prototype，所以super.p()就相当于A.prototype.p()。

          tips:
            这里需要注意，由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。

          ES6 规定，在子类普通方法中通过super调用父类的方法时，方法内部的this指向当前的子类实例。
          如果super作为对象，用在静态方法之中，这时super将指向父类，而不是父类的原型对象。
          在子类的静态方法中通过super调用父类的方法时，方法内部的this指向当前的子类，而不是子类的实例。

          tips:
            使用super的时候，必须显式(constructor)指定是作为函数、还是作为对象使用，否则会报错。

          由于对象总是继承其他对象的，所以可以在任意一个对象中，使用super关键字。

      类的 prototype 属性和__proto__属性:
        大多数浏览器的 ES5 实现之中，每一个对象都有__proto__属性，指向对应的构造函数的prototype属性。
        Class 作为构造函数的语法糖，同时有prototype属性和__proto__属性，因此同时存在两条继承链。
        同时也说明了构造函数也是有两条继承链的。
          eg:
            class A {
            }

            class B extends A {
            }


          1）子类的__proto__属性，表示构造函数的继承，总是指向父类。
             B.__proto__ === A // true

          2）子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性
             B.prototype.__proto__ === A.prototype // true

          原因：
            class A {
            }

            class B {
            }

            // B 的实例继承 A 的实例
            Object.setPrototypeOf(B.prototype, A.prototype);
            // 等同于
            B.prototype.__proto__ = A.prototype;

            // B 继承 A 的静态属性
            Object.setPrototypeOf(B, A);
            B.__proto__ = A;

            const b = new B();

            Object.setPrototypeOf = function (obj, proto) {
              obj.__proto__ = proto;
              return obj;
            }

    第一种，子类继承Object类。
      class A extends Object {
      }

      A.__proto__ === Object // true
      A.prototype.__proto__ === Object.prototype // true

    第二种情况，不存在任何继承。
      class A {
      }

      A.__proto__ === Function.prototype // true
      A.prototype.__proto__ === Object.prototype // true

    实例的 __proto__ 属性：
      子类实例的__proto__属性的__proto__属性，指向父类实例的__proto__属性。
      也就是说，子类的原型的原型，是父类的原型。

      通过子类实例的__proto__.__proto__属性，可以修改父类实例的行为

  原生构造函数的继承：
    原生构造函数是指语言内置的构造函数，通常用来生成数据结构：

      Boolean()
      Number()
      String()
      Array()
      Date()
      Function()
      RegExp()
      Error()
      Object()

  Mixin 模式的实现：
    Mixin 指的是多个对象合成一个新的对象，新对象具有各个组成成员的接口(方法)

    也说明：
      一个对象包含三类属性：实例属性、静态属性、原型属性（除了私有属性之外的）


























































