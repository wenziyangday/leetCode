Generator 函数的语法：
  概念及背景：
    Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。
    Generator 函数有多种理解角度。
      语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。
    执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。
      返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。

    形式上，Generator 函数是一个普通函数，但是有两个特征。
      一是，function关键字与函数名之间有一个星号；
      二是，函数体内部使用yield表达式，定义不同的内部状态（yield在英语里的意思就是“产出”）。

    Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。
      不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的    指针对象，
      也就是上一章介绍的遍历器对象（Iterator Object）。

    下一步，必须调用遍历器对象的next方法，使得指针移向下一个状态。
      也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，
        直到遇到下一个yield表达式（或return语句）为止。
      换言之，Generator 函数是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行。

    总结一下，
      调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。
      以后，每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象。
      value属性表示当前的内部状态的值，是yield表达式后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束。

    ES6 没有规定，function关键字与函数名之间的星号，写在哪个位置。这导致下面的写法都能通过。

  yield 表达式：
    由于 Generator 函数返回的遍历器对象，只有调用next方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。
    yield表达式就是暂停标志。

    遍历器对象的next方法的运行逻辑如下：
      1）遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。
      2）下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式。
      3）如果没有再遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。
      4）如果该函数没有return语句，则返回的对象的value属性值为undefined。

    tips:
      yield表达式后面的表达式，只有当调用next方法、内部指针指向该语句时才会执行，
      因此等于为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能
      yield表达式只能用在 Generator 函数里面，用在其他地方都会报错。
      yield表达式如果用在另一个表达式之中，必须放在圆括号里面。

    yield表达式与return语句既有相似之处，也有区别。
      相似之处在于:
        都能返回紧跟在语句后面的那个表达式的值。

      区别在于:
        每次遇到yield，函数暂停执行，下一次再从该位置继续向后执行，而return语句不具备位置记忆的功能。
        一个函数里面，只能执行一次（或者说一个）return语句，但是可以执行多次（或者说多个）yield表达式。
        正常函数只能返回一个值，因为只能执行一次return；Generator 函数可以返回一系列的值，因为可以有任意多个yield。
        从另一个角度看，也可以说 Generator 生成了一系列的值，这也就是它的名称的来历（英语中，generator 这个词是“生成器”的意思）。

      Generator 函数可以不用yield表达式，这时就变成了一个单纯的暂缓执行函数。

    与 Iterator 接口的关系：
      由于 Generator 函数就是遍历器生成函数，因此可以把 Generator 赋值给对象的Symbol.iterator属性，从而使得该对象具有 Iterator 接口。
        此时就可以使用...运算符

    Generator 函数执行后，返回一个遍历器对象。
      该对象本身也具有Symbol.iterator属性，执行后返回自身。

  next 方法的参数: TODO 有点意思
    yield表达式本身没有返回值，或者说总是返回undefined。
      next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值。

    这个功能有很重要的语法意义。
      Generator 函数从暂停状态到恢复运行，它的上下文状态（context）是不变的。
      通过next方法的参数，就有办法在 Generator 函数开始运行之后，继续向函数体内部注入值。
      也就是说，可以在 Generator 函数运行的不同阶段，从外部向内部注入不同的值，从而调整函数行为。

  for...of 循环：
    for...of循环可以自动遍历 Generator 函数运行时生成的Iterator对象，且此时不再需要调用next方法。
    利用for...of循环，可以写出遍历任意对象（object）的方法。
    原生的 JavaScript 对象没有遍历接口，无法使用for...of循环，通过 Generator 函数为它加上这个接口，就可以用了。

    tips:
      一旦next方法的返回对象的done属性为true，for...of循环就会中止，且不包含该返回对象，
      除了for...of循环以外，扩展运算符（...）、解构赋值和Array.from方法内部调用的，都是遍历器接口。
        这意味着，它们都可以将 Generator 函数返回的 Iterator 对象，作为参数。
      for...of的本质是一个while循环，

  Generator.prototype.throw()：
    Generator 函数返回的遍历器对象，都有一个throw方法，可以在函数体外抛出错误，然后在 Generator 函数体内捕获。

    throw方法可以接受一个参数，该参数会被catch语句接收，建议抛出Error对象的实例。
    throw方法抛出的错误要被内部捕获，前提是必须至少执行过一次next方法。
    throw命令与g.throw方法是无关的，两者互不影响。

  Generator.prototype.return()：
    Generator 函数返回的遍历器对象，还有一个return()方法，可以返回给定的值，并且 终结 遍历 Generator 函数。
    如果return()方法调用时，不提供参数，则返回值的value属性为undefined。
    如果 Generator 函数内部有try...finally代码块，且正在执行try代码块，那么return()方法会导致立刻进入finally代码块（跳过当前执行直接进入finally），
      执行完以后（返回finally中执行结果后，再执行return的值，然后才会结束），整个函数才会结束。

  next()、throw()、return() 的共同点：
    本质上是同一件事，可以放在一起理解。
    它们的作用都是让 Generator 函数恢复执行，并且 使用不同的语句 替换yield表达式。

    next()是将yield表达式替换成一个值。
    throw()是将yield表达式替换成一个throw语句。
    return()是将yield表达式替换成一个return语句。

  yield* 表达式 ：用于解决G函数嵌套时的手动调用
    如果在 Generator 函数内部，调用另一个 Generator 函数。需要在前者的函数体内部，自己手动完成遍历。
    ES6 提供了yield*表达式，作为解决办法，用来在一个 Generator 函数里面执行另一个 Generator 函数。
    从语法角度看，如果yield表达式后面跟的是一个遍历器对象，需要在yield表达式后面加上星号，表明它返回的是一个遍历器对象。这被称为yield*表达式。
    如果yield*后面跟着一个数组，由于数组原生支持遍历器，因此就会遍历数组成员。
    实际上，任何数据结构只要有 Iterator 接口，就可以被yield*遍历。
    如果被代理的 Generator 函数有return语句，那么就可以向代理它的 Generator 函数返回数据。
      var v = yield* foo();
        console.log("v: " + v);

    yield*命令可以很方便地取出嵌套数组的所有成员。

  作为对象属性的 Generator 函数:
    形如：
      let obj = {
        * myGeneratorMethod() {
          ···
        }
      };
      等价写法：
      let obj = {
        myGeneratorMethod: function* () {
          // ···
        }
      };

  Generator 函数的this：
    Generator 函数也不能跟new命令一起用，会报错。
    有没有办法让 Generator 函数返回一个正常的对象实例，既可以用next方法，又可以获得正常的this？
    变通方法。
      首先，生成一个空对象，使用call方法绑定 Generator 函数内部的this。
      这样，构造函数调用以后，这个空对象就是 Generator 函数的实例对象了。

  含义: TODO
    Generator 与状态机：
      Generator 是实现状态机的最佳结构。
    Generator 与协程：
    Generator 与上下文:

  应用：TODO 没有理解
    1）异步操作的 同步化表达(封装在一个函数)
    2）控制流管理（下级数据依赖上级数据（回调地狱问题））
    3）部署 Iterator 接口

  Generator 函数的异步应用：
    异步:
      所谓"异步"，简单说就是一个任务不是连续完成的，可以理解成该任务被人为分成两段，先执行第一段，
      然后转而执行其他任务，等做好了准备，再回过头执行第二段。

      相应地，连续的执行就叫做同步。由于是连续执行，不能插入其他任务，所以操作系统从硬盘读取文件的这段时间，程序只能干等着。

    回调函数：
      把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。
      回调函数的英语名字callback，直译过来就是"重新调用"

    回调函数地狱：
      如果依次读取两个以上的文件，就会出现多重嵌套。代码不是纵向发展，而是横向发展，很快就会乱成一团，无法管理。
      因为多个异步操作形成了强耦合，只要有一个操作需要修改，它的上层回调函数和下层回调函数，可能都要跟着修改。

      Promise 对象就是为了解决这个问题而提出的。
      它不是新的语法功能，而是一种新的写法，允许将回调函数的嵌套，改成链式调用。采用 Promise，连续读取多个文件，

      Promise 的最大问题是代码冗余，原来的任务被 Promise 包装了一下，不管什么操作，一眼看去都是一堆then，原来的语义变得很不清楚。
      那么，有没有更好的写法呢？
      async 和 await

      Generator 函数：










































