Promise 对象:
  Promise 的含义:
    Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。
      所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。
      从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。
      Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。

  特点：
    1.对象的状态不受外界影响。
      Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。
      只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。

    2.一旦状态改变，就不会再变，任何时候都可以得到这个结果。
      Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。
      只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。
      如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。
      这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的

  基本用法：
    ES6 规定，Promise对象是一个构造函数，用来生成Promise实例
    Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。
    resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 fulfilled），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；
    reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。
    Promise实例生成以后，可以用then方法分别指定fulfilled状态和rejected状态的回调函数

    tips:
      调用resolve或reject并不会终结 Promise 的参数函数的执行
      一般来说，调用resolve或reject以后，Promise 的使命就完成了，后继操作应该放到then方法里面，而不应该直接写在resolve或reject的后面。
      所以，最好在它们前面加上return语句，这样就不会有意外

  Promise.prototype.then() :
    Promise 实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。
      它的作用是为 Promise 实例添加状态改变时的回调函数。

  Promise.prototype.catch()：
    Promise.prototype.catch()方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数。
    Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止（一旦前面被捕获了，后续将不再进行捕获）。
    也就是说，错误总是会被下一个catch语句捕获。
    一般来说，不要在then()方法里面定义 Reject 状态的回调函数（即then的第二个参数），总是使用catch方法

  Promise.prototype.finally()：
    finally()方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。
    finally本质上是then方法的特例

  Promise.all()：
    Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。
      形如：const p = Promise.all([p1, p2, p3]);
      如果不是 Promise 实例，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。
      另外，Promise.all()方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。
      p的状态由p1、p2、p3决定，分成两种情况。
        1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。
        2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。
      tips:
        如果作为参数的 Promise 实例，自己定义了catch方法，那么它一旦被rejected，并不会触发Promise.all()的catch方法

  Promise.race():
    Promise.race()方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。
      形如：const p = Promise.race([p1, p2, p3]);
      只要p1、p2、p3之中 有一个实例率先 改变状态（指的是状态pending-->fulfilled或者pending-->rejected），p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。

  Promise.allSettled(): 处理的所有promise对象都已经完成任务了（无论是变更为fulfilled 还是rejected）
    有时候，我们希望等到一组异步操作都结束了，不管每一个操作是成功还是失败，再进行下一步操作。但是，现有的 Promise 方法很难实现这个要求。
    ES2020 引入了Promise.allSettled()方法，用来确定一组异步操作是否都结束了（不管成功或失败）。所以，它的名字叫做”Settled“，包含了”fulfilled“和”rejected“两种情况。

    该方法返回的新的 Promise 实例，一旦发生状态变更，状态总是fulfilled，不会变成rejected。
    状态变成fulfilled后，它的回调函数会接收到一个数组作为参数，该数组的每个成员对应前面数组的每个 Promise 对象。

  Promise.any()：
    ES2021 引入了Promise.any()方法。该方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例返回。
    只要参数实例有一个变成fulfilled状态，包装实例就会变成fulfilled状态；如果 所有参数 实例都变成rejected状态，包装实例就会变成rejected状态。
    Promise.any()跟Promise.race()方法很像，
      只有一点不同，就是Promise.any()不会因为某个 Promise 变成rejected状态而结束，必须等到所有参数 Promise 变成rejected状态才会结束。
      Promise.any()抛出的错误，不是一个一般的 Error 错误对象，而是一个 AggregateError 实例。
        它相当于一个数组，每个成员对应一个被rejected的操作所抛出的错误。

  Promise.resolve():
    有时需要将现有对象转为 Promise 对象，Promise.resolve()方法就起到这个作用

    Promise.resolve()方法的参数分成四种情况:
      参数是一个 Promise 实例:
        如果参数是 Promise 实例，那么Promise.resolve将不做任何修改、原封不动地返回这个实例

      参数是一个thenable对象:
        thenable对象指的是具有then方法的对象
        let thenable = {
          then: function(resolve, reject) {
            resolve(42);
          }
        }
        Promise.resolve()方法会将这个对象转为 Promise 对象，然后就立即执行thenable对象的then()方法。

      参数不是具有then()方法的对象，或根本就不是对象：
        如果参数是一个原始值，或者是一个不具有then()方法的对象，则Promise.resolve()方法返回一个新的 Promise 对象，状态为resolved。

      不带有任何参数:
        Promise.resolve()方法允许调用时不带参数，直接返回一个resolved状态的 Promise 对象。
        所以，如果希望得到一个 Promise 对象，比较方便的方法就是直接调用Promise.resolve()方法

  Promise.reject():
    Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected。
    Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。

  Promise.try()：
    经常遇到一种情况：不知道或者不想区分，函数f是同步函数还是异步操作，但是想用 Promise 来处理它。
    因为这样就可以不管f是否包含异步操作，都用then方法指定下一步流程，用catch方法处理f抛出的错误。
    通常是：
      Promise.resolve().then(f)
      上面的写法有一个缺点，就是如果f是同步函数，那么它会在本轮事件循环的末尾执行。

    有没有一种方法，让同步函数同步执行，异步函数异步执行，并且让它们具有统一的 API 呢？
      两种写法：
        用async函数来写
          const f = () => console.log('now');
          (async () => f())();
          console.log('next');
            tips：
              async () => f()会吃掉f()抛出的错误

        使用new Promise()：
          const f = () => console.log('now');
          (
            () => new Promise(
              resolve => resolve(f())
            )
          )();
          console.log('next');

          替代方案：
            const f = () => console.log('now');
            Promise.try(f);
            console.log('next');
    优势：
      可以更好地管理异常。


  应用：
    加载图片（懒加载图片）
    Generator 函数与 Promise 的结合：TODO (可以考虑一下（下一步，下一步操作 使用G函数和promise 的结合）)
      使用 Generator 函数管理流程，遇到异步操作的时候，通常返回一个Promise对象。

  Promise 的异步实现：
    rawAsap 方法是通过 setImmediate 或 process.nextTick 来实现异步执行的任务栈，
    而 asap 方法是对 rawAsap 方法的进一步封装，通过缓存的 domain 和 try/finally 实现了即使某个任务抛出异常也可以恢复任务栈的继续执行（再次调用rawAsap.requestFlush）。















