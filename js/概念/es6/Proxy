Proxy：
  概述：
    Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。
    Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。
    Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。

  ES6 原生提供 Proxy 构造函数，用来生成 Proxy 实例。
    var proxy = new Proxy(target, handler);
    Proxy 对象的所有用法，都是上面这种形式，不同的只是handler参数的写法。
    其中，new Proxy()表示生成一个Proxy实例，target参数表示所要拦截的目标对象，handler参数也是一个对象，用来定制拦截行为。

  同一个拦截器函数，可以设置拦截多个操作.
    get(target, propKey, receiver)：
      拦截对象属性的读取，比如proxy.foo和proxy['foo']。

    set(target, propKey, value, receiver)：
      拦截对象属性的设置，比如proxy.foo = v或proxy['foo'] = v，返回一个布尔值。

      tips:
        如果目标对象自身的某个属性不可写，那么set方法将不起作用。

    has(target, propKey)：
      拦截propKey in proxy的操作，返回一个布尔值。
      方法用来拦截HasProperty操作，即判断对象是否具有某个属性时，这个方法会生效。

      tips:
        如果原对象不可配置(configAble: false)或者禁止扩展(Object.preventExtensions())，这时has()拦截会报错
        has()拦截只对in运算符生效，对for...in循环不生效，

    deleteProperty(target, propKey)：
      拦截delete proxy[propKey]的操作，返回一个布尔值。
      如果这个方法抛出错误或者返回false，当前属性就无法被delete命令删除

    ownKeys(target)：
      拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循环，返回一个数组。
      该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。

    getOwnPropertyDescriptor(target, propKey)：
      拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象或者undefined。

    defineProperty(target, propKey, propDesc)：
      拦截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。

    preventExtensions(target)：
      拦截Object.preventExtensions(proxy)，返回一个布尔值。

    getPrototypeOf(target)：
      拦截Object.getPrototypeOf(proxy)，返回一个对象。

    isExtensible(target)：
      拦截Object.isExtensible(proxy)，返回一个布尔值。

    setPrototypeOf(target, proto)：
      拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。

    apply(target, object, args)：
      拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。

    construct(target, args)：
      拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(...args)。
      用于拦截new命令

      tips：
        construct()方法返回的必须是一个对象，否则会报错。
        由于construct()拦截的是构造函数，所以它的目标对象必须是函数，否则就会报错。
        construct()方法中的this指向的是handler，而不是实例对象。
        是construct，而不是constructor

  tips:
    要使得Proxy起作用，必须针对Proxy实例（上例是proxy对象）进行操作，而不是针对目标对象（上例是空对象）进行操作

  应用：
    1.为对象设置初始值 default值
    2.利用 Proxy，可以将读取属性的操作（get），转变为执行某个函数，从而实现属性的链式操作。

  Proxy.revocable()：
    Proxy.revocable()方法返回一个可取消的 Proxy 实例

    Proxy.revocable()的一个使用场景是，
      目标对象不允许直接访问，必须通过代理访问，一旦访问结束，就收回代理权，不允许再次访问。

  this 问题：
    虽然 Proxy 可以代理针对目标对象的访问，但它不是目标对象的透明代理，即不做任何拦截的情况下，也无法保证与目标对象的行为一致。
      主要原因就是在 Proxy 代理的情况下，目标对象内部的this关键字会指向 Proxy 代理。




