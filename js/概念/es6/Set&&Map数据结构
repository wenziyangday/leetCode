Set 和 Map 数据结构：
  Set:
    ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。
    向 Set 加入值的时候，不会发生类型转换，所以5和"5"是两个不同的值
    Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，它类似于精确相等运算符（===），
    主要的区别是向 Set 加入值时认为NaN等于自身，而精确相等运算符认为NaN不等于自身。
    在 Set 内部，两个NaN是相等的。+0 和 -0也是相等的

    Set 实例的属性和方法：
      属性：
        Set.prototype.constructor：构造函数，默认就是Set函数。
        Set.prototype.size：返回Set实例的成员总数。

      方法：
        操作方法（用于操作数据）和遍历方法（用于遍历成员）

        Set.prototype.add(value)：添加某个值，返回 Set 结构本身。
        Set.prototype.delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
        Set.prototype.has(value)：返回一个布尔值，表示该值是否为Set的成员。
        Set.prototype.clear()：清除所有成员，没有返回值。

      Array.from方法可以将 Set 结构转为数组
      这就提供了去除数组重复成员的另一种方法。

      遍历操作：
        Set.prototype.keys()：返回键名的遍历器
        Set.prototype.values()：返回键值的遍历器
        Set.prototype.entries()：返回键值对的遍历器
        Set.prototype.forEach()：使用回调函数遍历每个成员

        由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys方法和values方法的行为完全一致。

        Set 可以很容易地实现并集（Union）、交集（Intersect）和差集（Difference）

  WeakSet：弱引用
    WeakSet 结构与 Set 类似，也是不重复的值的集合
    它与 Set 有两个区别：
      WeakSet 的成员只能是对象，而不能是其他类型的值
      WeakSet 中的对象都是弱引用
        垃圾回收机制不考虑 WeakSet 对该对象的引用，
        也就是说，如果其他对象都不再引用该对象，
        那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。
          原因垃圾回收机制根据对象的可达性（reachability）来判断回收，如果对象还能被访问到，垃圾回收机制就不会释放这块内存。
          结束使用该值之后，有时会忘记取消引用，导致内存无法释放，进而可能会引发内存泄漏。
          WeakSet 里面的引用，都不计入垃圾回收机制，所以就不存在这个问题。
            WeakSet 适合临时存放一组对象，以及存放跟对象绑定的信息。只要这些对象在外部消失，它在 WeakSet 里面的引用就会自动消失。

          WeakSet 的成员是不适合引用的，因为它会随时消失。
            另外，由于 WeakSet 内部有多少个成员，取决于垃圾回收机制有没有运行，运行前后很可能成员个数是不一样的，
            而垃圾回收机制何时运行是不可预测的，因此 ES6 规定 WeakSet 不可遍历

    WeakSet 是一个构造函数，可以使用new命令，创建 WeakSet 数据结构
    作为构造函数，WeakSet 可以接受一个数组或类似数组的对象作为参数。
    （实际上，任何具有 Iterable 接口的对象，都可以作为 WeakSet 的参数。）该数组的所有成员，都会自动成为 WeakSet 实例对象的成员。

    tips:
      但是，对于数组成员不是对象的，WeakSet 会报错 （数组的成员只能是对象）

    WeakSet.prototype.add(value)：向 WeakSet 实例添加一个新成员。
    WeakSet.prototype.delete(value)：清除 WeakSet 实例的指定成员。
    WeakSet.prototype.has(value)：返回一个布尔值，表示某个值是否在 WeakSet 实例之中。

    WeakSet 没有size属性，没有办法遍历它的成员
    WeakSet 不能遍历，是因为成员都是弱引用，随时可能消失，遍历机制无法保证成员的存在，很可能刚刚遍历结束，成员就取不到了。
    WeakSet 的一个用处，是储存 DOM 节点，而不用担心这些节点从文档移除时，会引发内存泄漏。

  Map：
    含义和基本用法：Map 扩展了键的范围（各种类型的值（包括对象）都可以当作键）
      JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。
      为了解决这个问题，ES6 提供了 Map 数据结构。
      它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。
      也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。
      如果你需要“键值对”的数据结构，Map 比 Object 更合适。

      如果读取一个未知的键，则返回undefined。
      如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 将其视为一个键，
        比如0和-0就是一个键，布尔值true和字符串true则是两个不同的键（不会进行类型转化）。
        另外，undefined和null也是两个不同的键。
        虽然NaN不严格相等于自身，但 Map 将其视为同一个键。

      tips:
        注意，只有对同一个对象的引用(内存地址要一致)，Map 结构才将其视为同一个键。（这一点要非常小心）
        Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。
        这就解决了同名属性碰撞（clash）的问题，我们扩展别人的库的时候，如果使用对象作为键名，就不用担心自己的属性与原作者的属性同名。

    实例的属性和操作方法：
      size 属性：
        size属性返回 Map 结构的成员总数。

      Map.prototype.set(key, value)：
        set方法设置键名key对应的键值为value，然后返回整个 Map 结构。
        如果key已经有值，则键值会被更新，否则就新生成该键。
        set方法返回的是当前的Map对象，因此可以采用链式写法。

      Map.prototype.get(key)：
        get方法读取key对应的键值，如果找不到key，返回undefined。

      Map.prototype.has(key)：
        has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。

      Map.prototype.delete(key)：
        delete方法删除某个键，返回true。如果删除失败，返回false。

      Map.prototype.clear()：
        clear方法清除所有成员，没有返回值。

    遍历方法：
      Map.prototype.keys()：返回键名的遍历器。
      Map.prototype.values()：返回键值的遍历器。
      Map.prototype.entries()：返回所有成员的遍历器。
      Map.prototype.forEach()：遍历 Map 的所有成员。

      Map 的遍历顺序就是插入顺序。

      Map 结构转为数组结构，比较快速的方法是使用扩展运算符（...）结合数组的map方法、filter方法，可以实现 Map 的遍历和过滤（Map 本身没有map和filter方法）。
      [...map.entries()] === [...map] 本质上 map.entries === map
      map[Symbol.iterator] === map.entries

    与其他数据结构的互相转换:
      Map 转为数组：常用的就是扩展运算符
      数组 转为 Map：数组成员不能是基本数据类型
        new Map([
          [true, 7],
          [{foo: 3}, ['abc']]
        ])
      Map 转为对象：
        如果所有 Map 的键都是字符串，它可以无损地转为对象。
        如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名。
      对象转为 Map：
        对象转为 Map 可以通过Object.entries()
      Map 转为 JSON：
        Map 转为 JSON 要区分两种情况。一种情况是，Map 的键名都是字符串，这时可以选择转为对象 JSON。
        另一种情况是，Map 的键名有非字符串，这时可以选择转为数组 JSON。
      JSON 转为 Map：
        JSON 转为 Map，正常情况下，所有键名都是字符串。
        有一种特殊情况，整个 JSON 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 Map。
        这往往是 Map 转为数组 JSON 的逆操作。

  WeakMap：
    WeakMap结构与Map结构类似，也是用于生成键值对的集合。
    WeakMap与Map的区别有两点。
      WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名
      WeakMap的键名所指向的对象，不计入垃圾回收机制。

      WeakMap的设计目的在于，有时我们想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用，
      一旦不再需要这个对象，我们就必须手动删除这个引用

      WeakMap 就是为了解决这个问题而诞生的，它的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。
      因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。
      也就是说，一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。
      基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 WeakMap。

      总之，WeakMap的专用场合就是，它的键所对应的对象，可能会在将来消失。WeakMap结构有助于防止内存泄漏。

      注意，WeakMap 弱引用的只是键名，而不是键值。键值依然是正常引用。

  WeakMap 的语法：
    WeakMap 与 Map 在 API 上的区别主要是两个，
      一是没有遍历操作（即没有keys()、values()和entries()方法），也没有size属性。
      因为没有办法列出所有键名，某个键名是否存在完全不可预测，跟垃圾回收机制是否运行相关。
      这一刻可以取到键名，下一刻垃圾回收机制突然运行了，这个键名就没了，为了防止出现不确定性，就统一规定不能取到键名。二是无法清空，
      即不支持clear方法。因此，WeakMap只有四个方法可用：get()、set()、has()、delete()。

  WeakMap 的用途：
    DOM 节点作为键名
    部署私有属性

  WeakRef：TODO
    WeakSet 和 WeakMap 是基于弱引用的数据结构，ES2021 更进一步，提供了 WeakRef 对象，用于直接创建对象的弱引用。













