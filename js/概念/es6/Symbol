Symbol:
  概述：
    ES5 的对象属性名都是字符串，这容易造成属性名的冲突。
    比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。
    如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入Symbol的原因。

    ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。
    对象的属性名现在可以有两种类型：
      一种是原来就有的字符串，
      另一种就是新增的 Symbol 类型。

    如果 Symbol 的参数是一个对象，就会调用该对象的toString方法，将其转为字符串，然后才生成一个 Symbol 值

    tips:
      Symbol函数前不能使用new命令，否则会报错。
        这是因为生成的 Symbol 是一个原始类型的值，不是对象。
        也就是说，由于 Symbol 值不是对象，所以不能添加属性。
        基本上，它是一种类似于字符串的数据类型。

      Symbol函数的参数只是表示对当前 Symbol 值的描述，因此相同参数的Symbol函数的返回值是不相等的
      Symbol 值不能与其他类型的值进行运算，会报错。
      Symbol 值可以显式(String())转为字符串
      Symbol 值也可以显式(Boolean())转为布尔值，但是不能转为数值。

  Symbol.prototype.description：
    创建 Symbol 的时候，可以添加一个描述。
      const sym = Symbol('foo');
      sym.description // "foo"

  作为属性名的 Symbol：
    由于每一个 Symbol 值都是不相等的，这意味着 Symbol 值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。
    这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。

    tips:
      Symbol 值作为对象属性名时，不能用点运算符
      在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中。否则就是报错。

  实例：消除魔术字符串
    魔术字符串：
      在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。

  属性名的遍历：
    Symbol 作为属性名，遍历对象的时候，该属性不会出现在for...in、for...of循环中，
    也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回

    它也不是私有属性，有一个Object.getOwnPropertySymbols()方法，可以获取指定对象的所有 Symbol 属性名。
    该方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。
    Reflect.ownKeys()方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。

    由于以 Symbol 值作为键名，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些 非私有的、但又希望只用于内部的方法。

  Symbol.for()：
    我们希望重新使用同一个 Symbol 值，Symbol.for()方法可以做到这一点。
    它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。
    如果有，就返回这个 Symbol 值，否则就新建一个以该字符串为名称的 Symbol 值，并将其注册到全局。

    Symbol.for()与Symbol()这两种写法，都会生成新的 Symbol：
      它们的区别是，前者会被登记在全局环境中供搜索，后者不会。
      Symbol.for()不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。

    tips:
      Symbol.for()的这个全局登记特性，可以用在不同的 iframe 或 service worker 中取到同一个值。

  Symbol.keyFor()：
    返回一个已登记的 Symbol 类型值的key，对于未登记的则返回 undefined

  实例：模块的 Singleton 模式:
    Singleton 模式指的是调用一个类，任何时候返回的都是同一个实例

  内置的 Symbol 值：
    Symbol.hasInstance：
      对象的Symbol.hasInstance属性，指向一个内部方法。
      当其他对象使用instanceof运算符，判断是否为该对象的实例时，会调用这个方法。
      比如，foo instanceof Foo在语言内部，实际调用的是Foo[Symbol.hasInstance](foo)。








