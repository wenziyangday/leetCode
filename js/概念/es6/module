Module 的语法:
  概述：
    历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。
    在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。
      前者用于服务器，后者用于浏览器。
      ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。
      ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。
        CommonJS 和 AMD 模块，都只能在运行时确定这些东西。
        比如，CommonJS 模块就是对象，输入时必须查找对象属性。
      ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。
        eg：
          // ES6模块
          import { stat, exists, readFile } from 'fs';
          上面代码的实质是从fs模块加载 3 个方法，其他方法不加载。
          这种加载称为“编译时加载”或者静态加载，即 ES6 可以在编译时就完成模块加载，效率要比 CommonJS 模块的加载方式高。
          当然，这也导致了没法引用 ES6 模块本身，因为它不是对象。

      ES6 模块还有以下好处：
        静态加载
        不再需要UMD模块格式了，将来服务器和浏览器都会支持 ES6 模块格式。
          目前，通过各种工具库，其实已经做到了这一点。
        将来浏览器的新 API 就能用模块格式提供，不再必须做成全局变量或者navigator对象的属性。
        不再需要对象作为命名空间（比如Math对象），未来这些功能可以通过模块提供。

  严格模式：
    ES6 的模块自动采用严格模式，不管你有没有在模块头部加上"use strict";
    严格模式主要有以下限制：

      变量必须声明后再使用
      函数的参数不能有同名属性，否则报错
      不能使用with语句
      不能对只读属性赋值，否则报错
      不能使用前缀 0 表示八进制数，否则报错
      不能删除不可删除的属性，否则报错
      不能删除变量delete prop，会报错，只能删除属性delete global[prop]
      eval不会在它的外层作用域引入变量
      eval和arguments不能被重新赋值
      arguments不会自动反映函数参数的变化
      不能使用arguments.callee
      不能使用arguments.caller
      禁止this指向全局对象
        顶层this执行undefined，即不应该在顶层代码中使用this

      不能使用fn.caller和fn.arguments获取函数调用的堆栈
      增加了保留字（比如protected、static和interface）

  export 命令：
    模块功能主要由两个命令构成：export和import。
      export命令用于规定模块的对外接口，
      import命令用于输入其他模块提供的功能。

    一个模块就是一个独立的文件。
      该文件内部的所有变量，外部无法获取。
      如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。
      export命令除了输出变量，还可以输出函数或类（class）
      通常情况下，export输出的变量就是本来的名字，但是可以使用as关键字重命名

      tips:
        export命令规定的是对外的接口(变量、函数、类)，必须与模块内部的变量建立  一一对应关系。
        export语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。
          区别：
            CommonJS 模块输出的是值的缓存，不存在动态更新，
        export命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，

  import 命令：
    使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。
    如果想为输入的变量重新取一个名字，import命令要使用as关键字，将输入的变量重命名。
    import命令输入的变量都是只读的，因为它的本质是输入接口。
      也就是说，不允许在加载模块的脚本里面，改写接口。
    import后面的from指定模块文件的位置，可以是相对路径，也可以是绝对路径。
      如果不带有路径，只是一个模块名，那么必须有配置文件，告诉 JavaScript 引擎该模块的位置。

    tips：
      import命令具有提升效果，会提升到整个模块的头部，首先执行。
        foo();
        import { foo } from 'my_module';
        //  不会报错

      由于import是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。
      如果多次重复执行同一句import语句(加载多次)，那么只会执行一次，而不会执行多次。
      import语句是 Singleton 模式

      目前阶段，通过 Babel 转码，CommonJS 模块的require命令和 ES6 模块的import命令，可以写在同一个模块里面，但是最好不要这样做。
      因为import在静态解析阶段执行，所以它是一个模块之中最早执行的
      eg：
        require('core-js/modules/es6.symbol');
        require('core-js/modules/es6.promise');
        import React from 'React';

  模块的整体加载：
    除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。
    eg:
      import * as circle from './circle';

  export default 命令:
    为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到export default命令，为模块指定默认输出。
    可以用在匿名函数、也可以用在具名函数前


  ES6 模块与 CommonJS 模块的差异：
    CommonJS 模块输出的是一个值的拷贝(CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值)，
      ES6 模块输出的是值的引用。

    CommonJS 模块是运行时加载，
      ES6 模块是编译时输出接口。

    CommonJS 模块的require()是同步加载模块，
      ES6 模块的import命令是异步加载，有一个独立的模块依赖的解析阶段。

  Node.js 的模块加载方法:
    JavaScript 现在有两种模块。
      一种是 ES6 模块，简称 ESM；
      另一种是 CommonJS 模块，简称 CJS。
        CommonJS 模块是 Node.js 专用的，与 ES6 模块不兼容。
        语法上面，两者最明显的差异是，CommonJS 模块使用require()和module.exports，ES6 模块使用import和export。

        .mjs文件总是以 ES6 模块加载，.cjs文件总是以 CommonJS 模块加载，.js文件的加载取决于package.json里面type字段的设置

      tips:
        ES6 模块与 CommonJS 模块尽量不要混用。
        require命令不能加载.mjs文件，会报错，只有import命令才可以加载.mjs文件。
        反过来，.mjs文件里面也不能使用require命令，必须使用import。


