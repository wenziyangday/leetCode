函数的扩展：
  函数参数的默认值：
    ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。
    ES6 的写法还有两个好处：
      首先，阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；
      其次，有利于将来的代码优化，即使未来的版本在对外接口中，彻底拿掉这个参数，也不会导致以前的代码无法运行。

    使用参数默认值时，函数不能有同名参数。
    另外，一个容易忽略的地方是，参数默认值不是传值的，而是每次都重新计算默认值表达式的值。也就是说，参数默认值是惰性求值的。

    与解构赋值默认值结合使用：

    参数默认值的位置：
      通常情况下，定义了默认值的参数，应该是函数的     尾参数。
      因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际上这个参数是没法省略的。

    函数的 length 属性：
      指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，length属性将失真。
      非尾参数 length将失真 （0）

    作用域：TODO 有点意思

    name 属性：
      函数的name属性，返回该函数的函数名。
      对于命名函数返回函数名

      如果将一个匿名函数赋值给一个变量，ES5 的name属性，会返回空字符串，而 ES6 的name属性会返回实际的函数名。

    箭头函数：
      箭头函数没有自己的this对象
      不可以当作构造函数，也就是说，不可以对箭头函数使用new命令，否则会抛出一个错误。
      不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。
      不可以使用yield命令，因此箭头函数不能用作 Generator 函数

      不适用场合：由于箭头函数使得this从“动态”变成“静态”
        定义对象的方法，且该方法内部包括this
        需要动态this的时候，也不应使用箭头函数。
        如果函数体很复杂，有许多行，或者函数内部有大量的读写操作，不单纯是为了计算值，这时也不应该使用箭头函数，而是要使用普通函数，这样可以提高代码可读性。

    尾调用优化: TODO 有点意思
      尾调用：
        指某个函数的最后一步是调用另一个函数
        尾调用不一定出现在函数尾部，只要是最后一步操作即可。

    尾递归：TODO 有点意思
      函数调用自身，称为递归。如果尾调用自身，就称为尾递归。
      递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。
      但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。

    柯里化：TODO 有点意思
      将多参数的函数转换成单参数的形式

    递归本质上是一种循环操作。
    纯粹的函数式编程语言没有循环操作命令，所有的循环都用递归实现，这就是为什么尾递归对这些语言极其重要。
    对于其他支持“尾调用优化”的语言（比如 Lua，ES6），只需要知道循环可以用递归代替，而一旦使用递归，就最好使用尾递归。

