字符串的扩展：
  字符串的Unicode表示法：
    \uxxxx形式表示一个字符串，其中xxxx表示字符的Unicode码点
    这种表示法只限于码点在\u0000~\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。\uD842\uDFB7

  字符串的遍历器接口：
    ES6为字符串添加了遍历器接口，使得字符串可以被for...of循环遍历
    除了遍历字符串，这个遍历器最大的优点是可以识别大于0xFFFF的码点，传统的for循环无法识别这样的码点

  直接输入 U+2028 和 U+2029 特殊符号

  JSON.stringify() 的改造

  模板字符串 TODO 有点意思
    应用：模板编译，结合正则

  标签模板：TODO 有点意思
    应用：
      过滤HTML字符串，防止用户输入恶意内容
      多语言转化

  字符串的新增方法：
    String.fromCodePoint()：
      ES5 提供String.fromCharCode()方法，用于从 Unicode 码点返回对应字符，但是这个方法不能识别码点大于0xFFFF的字符。
      ES6 提供String.fromCodePoint()方法，可以识别大于0xFFFF的字符，弥补了String.fromCharCode()方法的不足。
      如果String.fromCodePoint方法有多个参数，则它们会被合并成一个字符串返回

    String.raw():
      该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。

    实例方法：codePointAt()：
      ES6 提供了codePointAt()方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。

    实例方法：normalize()：
      许多欧洲语言有语调符号和重音符号。为了表示它们，Unicode 提供了两种方法。
      一种是直接提供带重音符号的字符，比如Ǒ（\u01D1）。
      另一种是提供合成符号（combining character），即原字符与重音符号的合成，两个字符合成一个字符，
        比如O（\u004F）和ˇ（\u030C）合成Ǒ（\u004F\u030C）。

    实例方法：includes(), startsWith(), endsWith()：
      includes()：返回布尔值，表示是否找到了参数字符串。
      startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。
      endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。
        这三个方法都支持第二个参数，表示开始搜索的位置。
        使用第二个参数n时，endsWith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。

    实例方法：repeat()：
      repeat方法返回一个新字符串，表示将原字符串重复n次。
        参数如果是小数，会被取整。
        如果repeat的参数是负数或者Infinity，会报错。
        但是，如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。
        0 到-1 之间的小数，取整以后等于-0，repeat视同为 0。
        参数NaN等同于 0
        如果repeat的参数是字符串，则会先转换成数字

    实例方法：padStart()，padEnd()：
      ES2017 引入了字符串补全长度的功能。
      如果某个字符串不够指定长度，会在头部或尾部补全。
      padStart()用于头部补全，padEnd()用于尾部补全。

      padStart()和padEnd()一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。
      如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。
      如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。
      如果省略第二个参数，默认使用空格补全长度。

      padStart()的常见用途是为数值补全指定位数。
      另一个用途是提示字符串格式。

    实例方法：trimStart()，trimEnd()：
      ES2019 对字符串实例新增了trimStart()和trimEnd()这两个方法。
      它们的行为与trim()一致，trimStart()消除字符串头部的空格，
      trimEnd()消除尾部的空格。它们返回的都是新字符串，不会修改原始字符串。
      浏览器还部署了额外的两个方法，trimLeft()是trimStart()的别名，trimRight()是trimEnd()的别名。

    实例方法：matchAll()：
      matchAll()方法返回一个正则表达式在当前字符串的所有匹配

    实例方法：replaceAll()：
      可以一次性替换所有匹配。
      String.prototype.replaceAll(searchValue, replacement)
        searchValue是搜索模式，可以是一个字符串，也可以是一个全局的正则表达式（带有g修饰符）
        如果searchValue是一个不带有g修饰符的正则表达式，replaceAll()会报错
        replaceAll()的第二个参数replacement除了为字符串，也可以是一个函数，该函数的返回值将替换掉第一个参数searchValue匹配的文本

    实例方法：at()：
       at()方法接受一个整数作为参数，返回参数指定位置的字符，支持负索引（即倒数的位置）
       如果参数位置超出了字符串范围，at()返回undefined

    tips:
      fromCodePoint方法定义在String对象上，而codePointAt方法定义在字符串的实例对象上。
