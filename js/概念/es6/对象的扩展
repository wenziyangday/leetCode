对象的扩展：
  属性的简洁表示法：
  属性名表达式（用表达式作为对象中的键）
  方法的 name 属性
    函数的name属性，返回函数名。对象方法也是函数，因此也有name属性
    如果对象的方法使用了取值函数（getter）和存值函数（setter），则name属性不是在该方法上面，
      而是该方法的属性的描述对象的get和set属性上面，返回值是方法名前加上get和set
    如果对象的方法是一个 Symbol 值，那么name属性返回的是这个 Symbol 值的描述

    有两种特殊情况：bind方法创造的函数，name属性返回bound加上原函数的名字；
      Function构造函数创造的函数，name属性返回anonymous。

  属性的可枚举性和遍历：
    可枚举性：
      对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为
      Object.getOwnPropertyDescriptor(obj, 'foo')
      //  {
      //    value: 123,
      //    writable: true,
      //    enumerable: true,
      //    configurable: true
      //  }
      描述对象的enumerable属性，称为“可枚举性”，如果该属性为false，就表示某些操作会忽略当前属性
      目前，有四个操作会忽略enumerable为false的属性。
        for...in循环：只遍历对象自身的和继承的可枚举的属性。
        Object.keys()：返回对象自身的所有可枚举的属性的键名。
        JSON.stringify()：只串行化对象自身的可枚举的属性。
        Object.assign()： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。

    属性的遍历：
      for...in
        循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。
      Object.keys(obj)：
        Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。
      Object.getOwnPropertyNames(obj)：
        Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。
      Object.getOwnPropertySymbols(obj)：
        Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。
      Reflect.ownKeys(obj)：
         Reflect.ownKeys返回一个数组，包含对象自身的（不含继承的）所有键名（Symbol && 忽略枚举属性），不管键名是 Symbol 或字符串，也不管是否可枚举。

        以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则。
          首先遍历所有数值键，按照数值升序排列。
          其次遍历所有字符串键，按照加入时间升序排列。
          最后遍历所有 Symbol 键，按照加入时间升序排列。

    super 关键字
      this关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字super，指向当前对象的原型对象
      JavaScript 引擎内部，super.foo等同于Object.getPrototypeOf(this).foo（属性）或Object.getPrototypeOf(this).foo.call(this)（方法）。

  对象的扩展运算符
    解构赋值
      对象的解构赋值用于从一个对象取值，相当于将目标对象自身的所有可遍历的（enumerable）、但尚未被读取的属性，分配到指定的对象上面。
      所有的键和它们的值，都会拷贝到新对象上面。
      由于解构赋值要求等号右边是一个对象，所以如果等号右边是undefined或null，就会报错，因为它们无法转为对象。
      解构赋值必须是最后一个参数，否则会报错。

      tips:
        解构赋值的拷贝是浅拷贝，即如果一个键的值是复合类型的值（数组、对象、函数）、
        那么解构赋值拷贝的是这个值的引用，而不是这个值的副本。
        扩展运算符的解构赋值，不能复制继承自原型对象的属性
        ES6 规定，变量声明语句之中，如果使用解构赋值，扩展运算符后面必须是一个变量名，而不能是一个解构赋值表达式，
        所以上面代码引入了中间变量newObj，如果写成下面这样会报错。
        let { x, ...{ y, z } } = o;
        解构赋值的一个用处，是扩展某个函数的参数，引入其他操作。

    扩展运算符:
      如果扩展运算符后面不是对象，则会自动将其转为对象。
      // 等同于 {...Object(1)}
      {...1} // {}
      // 等同于 {...Object(true)}
      {...true} // {}

      // 等同于 {...Object(undefined)}
      {...undefined} // {}

      // 等同于 {...Object(null)}
      {...null} // {}

      但是，如果扩展运算符后面是字符串，它会自动转成一个类似数组的对象，因此返回的不是空对象。
      对象的扩展运算符等同于使用Object.assign()方法。只是拷贝了对象实例的属性，如果想完整克隆一个对象，还拷贝对象原型的属性，
      如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。
      与数组的扩展运算符一样，对象的扩展运算符后面可以跟表达式。
      扩展运算符的参数对象之中，如果有取值函数get，这个函数是会执行的。

  对象扩展的方法：
    Object.is() ：
      ES5 比较两个值是否相等，只有两个运算符：相等运算符（==）和严格相等运算符（===）。
        它们都有缺点，前者会自动转换数据类型，后者的NaN不等于自身，以及+0等于-0。
        JavaScript 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。

      ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。
      Object.is就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。
      不同之处只有两个：一是+0不等于-0，二是NaN等于自身。

      ES5实现代码 TODO focus
    Object.assign()：
      Object.assign(target, source1, source2, ...)方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。
      这是一个浅拷贝.
      如果undefined和null不在首参数，就不会报错。

      tips:
        浅拷贝
        同名属性替换
        数组的处理:
          Object.assign()可以用来处理数组，但是会把数组视为对象。
            Object.assign()把数组视为属性名为 0、1、2 的对象，因此源数组的 0 号属性4覆盖了目标数组的 0 号属性1。
        取值函数的处理:
          Object.assign()只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制(执行取值函数同时赋值给对应的函数名称)。

      用途：
       为对象添加属性
       为对象添加方法
       克隆对象:
        采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。
        那如何保持继承链呢？
       合并多个对象
       为属性设置指定的默认值

    Object.getOwnPropertyDescriptors()：
      ES5 的Object.getOwnPropertyDescriptor()方法会返回某个对象属性的描述对象（descriptor）。
      ES2017 引入了Object.getOwnPropertyDescriptors()方法，返回指定对象所有自身属性（非继承属性）的描述对象。
      该方法的引入目的，主要是为了解决Object.assign()无法正确拷贝get属性和set属性的问题。

    __proto__属性：
      实现上，__proto__调用的是Object.prototype.__proto__
      该属性没有写入 ES6 的正文，而是写入了附录，
        原因是__proto__前后的双下划线，
        说明它本质上是一个内部属性，而不是一个正式的对外的 API，
        只是由于浏览器广泛支持，才被加入了 ES6。
        标准明确规定，只有浏览器必须部署这个属性，其他运行环境不一定需要部署，而且新的代码最好认为这个属性是不存在的。
        因此，无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，
        而是使用下面的Object.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替
      如果一个对象本身部署了__proto__属性，该属性的值就是对象的原型。

    Object.setPrototypeOf():
      Object.setPrototypeOf方法的作用与__proto__相同，用来设置一个对象的原型对象（prototype），返回参数对象本身。
      它是 ES6 正式推荐的设置原型对象的方法。
      // 格式
      Object.setPrototypeOf(object, prototype)
      如果第一个参数不是对象，会自动转为对象。但是由于返回的还是第一个参数，所以这个操作不会产生任何效果。
      由于undefined和null无法转为对象，所以如果第一个参数是undefined或null，就会报错。

    Object.getPrototypeOf()：
      该方法与Object.setPrototypeOf方法配套，用于读取一个对象的原型对象。
      Object.getPrototypeOf(obj)

      如果参数不是对象，会被自动转为对象。
      如果参数是undefined或null，它们无法转为对象，所以会报错。

    Object.keys():
      ES5 引入了Object.keys方法，返回一个数组，
      成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的    键名。

    Object.values():
      Object.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的   键值。
      Object.values会过滤 属性名为 Symbol 值的属性
      如果Object.values方法的参数是一个字符串，会返回各个字符组成的一个数组。
      如果参数不是对象，Object.values会先将其转为对象。由于数值和布尔值的包装对象，都不会为实例添加非继承的属性。
      所以，Object.values会返回空数组。

    Object.entries():
      Object.entries()方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的   键值对数组。
      如果原对象的属性名是一个 Symbol 值，该属性会被忽略。

      Object.entries的基本用途是:
        遍历对象的属性
        将对象转为真正的Map结构

    Object.fromEntries():
      Object.fromEntries()方法是Object.entries()的逆操作，用于将一个 键值对数组 转为对象。

      该方法的主要目的，是将键值对的数据结构还原为对象，因此特别适合将 Map 结构转为对象。

      该方法的一个用处是配合URLSearchParams对象，将查询字符串转为对象:
        Object.fromEntries(new URLSearchParams('foo=bar&baz=qux')) 转化成一个参数对象
