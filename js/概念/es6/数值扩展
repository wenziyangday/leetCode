数值的扩展：
  二进制和八进制表示法：
    二进制： 0b 或者 0B
    八进制： 0o 或者 0O

    如果要将0b和0o前缀的字符串数值转为十进制，要使用Number方法 Number('0b111')

  数值分隔符：
    ES2021，允许 JavaScript 的数值使用下划线（_）作为分隔符。

    除了十进制，其他进制的数值也可以使用分隔符

    tips:
      不能放在数值的最前面（leading）或最后面（trailing）。
      不能两个或两个以上的分隔符连在一起。
      小数点的前后不能有分隔符。
      科学计数法里面，表示指数的e或E前后不能有分隔符。
      分隔符不能紧跟着进制的前缀0b、0B、0o、0O、0x、0X

      数值分隔符只是一种书写便利，对于 JavaScript 内部数值的存储和输出，并没有影响。

      下面三个将字符串转成数值的函数，不支持数值分隔符。
        Number()
        parseInt()
        parseFloat()

  Number.isFinite(), Number.isNaN()：
    ES6 在Number对象上，新提供了Number.isFinite()和Number.isNaN()两个方法。

    Number.isFinite()用来检查一个数值是否为有限的（finite），即不是Infinity。
    注意，如果参数类型不是数值，Number.isFinite一律返回false。

    Number.isNaN()用来检查一个值是否为NaN。
    如果参数类型不是NaN，Number.isNaN一律返回false。

  Number.parseInt(), Number.parseFloat()：
    ES6 将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。
    这样做的目的，是逐步减少全局性方法，使得语言逐步模块化。

  Number.isInteger()：
    Number.isInteger()用来判断一个数值是否为整数。
    JavaScript 内部，整数和浮点数采用的是同样的储存方法，所以 25 和 25.0 被视为同一个值。
    如果参数不是数值，Number.isInteger返回false。


    tips:
      由于 JavaScript 采用 IEEE 754 标准，数值存储为64位双精度格式，
      数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。
      如果数值的精度超过这个限度，第54位及后面的位就会被丢弃，这种情况下，Number.isInteger可能会误判。
      Number.isInteger(3.0000000000000002) // true
      如果一个数值的绝对值小于Number.MIN_VALUE（5E-324），即小于 JavaScript 能够分辨的最小值，会被自动转为 0。
      这时，Number.isInteger也会误判。
      Number.isInteger(5E-324) // false
      Number.isInteger(5E-325) // true
