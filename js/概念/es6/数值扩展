str, num, boolean, null, undefined, symbol, 对象、BigInt

数值的扩展：
  二进制和八进制表示法：
    二进制： 0b 或者 0B
    八进制： 0o 或者 0O

    如果要将0b和0o前缀的字符串数值转为十进制，要使用Number方法 Number('0b111')

  数值分隔符：
    ES2021，允许 JavaScript 的数值使用下划线（_）作为分隔符。

    除了十进制，其他进制的数值也可以使用分隔符

    tips:
      不能放在数值的最前面（leading）或最后面（trailing）。
      不能两个或两个以上的分隔符连在一起。
      小数点的前后不能有分隔符。
      科学计数法里面，表示指数的e或E前后不能有分隔符。
      分隔符不能紧跟着进制的前缀0b、0B、0o、0O、0x、0X

      数值分隔符只是一种书写便利，对于 JavaScript 内部数值的存储和输出，并没有影响。

      下面三个将字符串转成数值的函数，不支持数值分隔符。
        Number()
        parseInt()
        parseFloat()

  Number.isFinite(), Number.isNaN()：
    ES6 在Number对象上，新提供了Number.isFinite()和Number.isNaN()两个方法。

    Number.isFinite()用来检查一个数值是否为有限的（finite），即不是Infinity。
    注意，如果参数类型不是数值，Number.isFinite一律返回false。

    Number.isNaN()用来检查一个值是否为NaN。
    如果参数类型不是NaN，Number.isNaN一律返回false。

  Number.parseInt(), Number.parseFloat()：
    ES6 将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。
    这样做的目的，是逐步减少全局性方法，使得语言逐步模块化。

  Number.isInteger()：
    Number.isInteger()用来判断一个数值是否为整数。
    JavaScript 内部，整数和浮点数采用的是同样的储存方法，所以 25 和 25.0 被视为同一个值。
    如果参数不是数值，Number.isInteger返回false。

    tips:
      由于 JavaScript 采用 IEEE 754 标准，数值存储为64位双精度格式，
      数值精度最多可以达到 53 个二进制位（1 个隐藏位与 52 个有效位）。
      如果数值的精度超过这个限度，第54位及后面的位就会被丢弃，这种情况下，Number.isInteger可能会误判。
      Number.isInteger(3.0000000000000002) // true
      如果一个数值的绝对值小于Number.MIN_VALUE（5E-324），即小于 JavaScript 能够分辨的最小值，会被自动转为 0。
      这时，Number.isInteger也会误判。
      Number.isInteger(5E-324) // false
      Number.isInteger(5E-325) // true

  Number.EPSILON：2 的 -52 次方
    ES6 在Number对象上面，新增一个极小的常量Number.EPSILON。根据规格，它表示 1 与 大于 1 的 最小浮点数 之间的 差。
    对于 64 位浮点数来说，大于 1 的最小浮点数相当于二进制的1.00..001，小数点后面有连续 51 个零。
    这个值减去 1 之后，就等于 2 的 -52 次方。
    Number.EPSILON实际上是 JavaScript 能够表示的最小精度。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差了。
    引入一个这么小的量的目的，在于为浮点数计算，设置一个误差范围。我们知道浮点数计算是不精确的。
    Number.EPSILON可以用来设置“能够接受的误差范围”

  安全整数和 Number.isSafeInteger()：
    JavaScript 能够准确表示的整数范围在-2^53到2^53之间（不含两个端点），超过这个范围，无法精确表示这个值
    ES6 引入了Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER这两个常量，用来表示这个范围的上下限
    Number.MAX_SAFE_INTEGER === Math.pow(2, 53) -1
    Number.MIN_SAFE_INTEGER === -Math.pow(2, 53) + 1
    实际使用这个函数时，需要注意。验证运算结果是否落在安全整数的范围内，不要只验证运算结果，而要同时验证参与运算的每个值。

  BigInt 数据类型: const a = 100n
    JavaScript 所有数字都保存成 64 位浮点数，这给数值的表示带来了两大限制。
    一是数值的精度只能到 53 个二进制位（相当于 16 个十进制位），
    大于这个范围的整数，JavaScript 是无法精确表示，这使得 JavaScript 不适合进行科学和金融方面的精确计算。
    二是大于或等于2的1024次方的数值，JavaScript 无法表示，会返回Infinity。
    ES2020 引入了一种新的数据类型 BigInt（大整数），来解决这个问题，这是 ECMAScript 的第八种数据类型。
    BigInt 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示

    为了与 Number 类型区别，BigInt 类型的数据必须添加后缀n。
    BigInt 同样可以使用各种进制表示，都要加上后缀n。
    BigInt 与普通整数是两种值，它们之间并不相等。
    typeof运算符对于 BigInt 类型的数据返回bigint。
    BigInt 可以使用负号（-），但是不能使用正号（+），因为会与 asm.js 冲突。

  BigInt 函数：
    JavaScript 原生提供BigInt函数，可以用它生成 BigInt 类型的数值。转换规则基本与Number()一致，将其他类型的值转为 BigInt。


