运算符的扩展：
  指数运算符：(**)
    2 ** 2 === 4
    这个运算符的一个特点是右结合，而不是常见的左结合。多个指数运算符连用时，是从最右边开始计算的。
     2 ** 3 ** 2 === 2 ** (3 ** 2) === 512
    指数运算符可以与等号结合，形成一个新的赋值运算符（**=）

  链判断运算符: ?.
    编程实务中，如果读取对象内部的某个属性，往往需要判断一下，属性的上层对象是否存在。
    使用了?.运算符，直接在链式调用的时候判断，左侧的对象是否为null或undefined。
    如果是的，就不再往下运算，而是返回undefined。

    链判断运算符?.有三种写法:
      obj?.prop // 对象属性是否存在
      obj?.[expr] // 同上 (描述的是正则)
      func?.(...args) // 函数或对象方法是否存在

    tips:
      短路机制:
        本质上，?.运算符相当于一种短路机制，只要不满足条件，就不再往下执行
      括号的影响:
        如果属性链有圆括号，链判断运算符对圆括号外部没有影响，只对圆括号内部有影响
        一般来说，使用?.运算符的场合，不应该使用圆括号
      报错场合:
        以下写法是禁止的，会报错。
          // 构造函数
          new a?.()
          new a?.b()

          // 链判断运算符的右侧有模板字符串
          a?.`{b}`
          a?.b`{c}`

          // 链判断运算符的左侧是 super
          super?.()
          super?.foo

          // 链运算符用于赋值运算符左侧
          a?.b = c

      右侧不得为十进制数值:
        为了保证兼容以前的代码，允许foo?.3:0被解析成foo ? .3 : 0，因此规定如果?.后面紧跟一个十进制数字，
        那么?.不再被看成是一个完整的运算符，而会按照三元运算符进行处理，
        也就是说，那个小数点会归属于后面的十进制数字，形成一个小数。

    Null 判断运算符：
      ES2020 引入了一个新的 Null 判断运算符??
      只有运算符左侧的值为null或undefined时，才会返回右侧的值
      ??本质上是逻辑运算，它与其他两个逻辑运算符&&和||有一个优先级问题，它们之间的优先级到底孰高孰低。优先级的不同，往往会导致逻辑运算的结果不同。
      现在的规则是，如果多个逻辑运算符一起使用，必须用括号表明优先级，否则会报错。

    逻辑赋值运算符：
      ||=、&&=、??=相当于先进行逻辑运算 然后根据运算结果 再视情况进行赋值运算
      // 或赋值运算符
      x ||= y
      // 等同于
      x || (x = y)

      // 与赋值运算符
      x &&= y
      // 等同于
      x && (x = y)

      // Null 赋值运算符
      x ??= y
      // 等同于
      x ?? (x = y)

      它们的一个用途是，为变量或属性设置默认值。
        // 老的写法
        user.id = user.id || 1;

        // 新的写法
        user.id ||= 1;

        user.id属性如果不存在，则设为1，新的写法比老的写法更紧凑一些。





