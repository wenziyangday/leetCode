浏览器为什么要拆分任务：
  由于js是单线程的,只有当上一个任务完成之后才会继续完成下一个任务,如果前一个任务耗时很长，后一个任务就不得不一直等着。

浏览器任务：
  1.宏任务
    1）setTimeout
    2）setInterval
    3）requestAnimationFrame (浏览器中执行有效)
    优先级：
      requestAnimationFrame > setInterval
      requestAnimationFrame > setTimeout
      setInterval和setTimeout 之间的先后，主要是看其在任务大队类中的顺序

  2.微任务
    1）MutationObserver
    2）Promise.then、catch、finally

EventLoop:
  执行栈中的代码看做一个宏任务、执行完毕后执行栈中的微任务、直至微任务执行完毕后，才会开始进行下一个宏任务
  个人觉得在宏任务执行完成后，微任务执行（如果微任务中发现宏任务，则会将该宏任务扔到宏任务队列中），微任务队列执行完毕后，则开启新一轮宏任务执行

  执行栈中的代码：宏任务 > 微任务


nodejs中的EventLoop:
  执行经过以下几个阶段：
    1）定时器阶段：检查定时器阶段
    2）I/O异常回调阶段
    3）轮询阶段：
    4）check阶段：
    5）关闭事件对的回调函数：

  宏任务：
    1）setTimeout
    2）setInterval
    3）setImmediate

  微任务：
    1）process.nextTick
    2）Promise.then、catch、finally

  node 版本 >= 11 其EventLoop和浏览器的表现是一致的
  版本 < 11 定时器出现会将微任务暂时保存，直接去执行新的定时器任务，然后将新的微任务添加得到微任务队列中


浏览器的EventLoop和nodejs 的区别：
  浏览器在处理微任务时候，是在宏任务执行完毕后进行执行的
  nodejs中的微任务是在EventLoop不同阶段间进行执行的


JavaScript 有一个基于事件循环的并发模型
  事件循环：
    负责执行代码、收集和处理事件、执行队列中的子任务。
    why call 事件循环?：
      原因是它经常按照类似如下的方式被实现：
      while(queue.waitForMessage()) {
        queue.processNextMessage();
      }

  并发模型：

  栈（Stack）：
    函数调用形成了一个由若干 帧 组成的栈。

  堆（Heap）：
    对象 被分配在堆中，堆是一个用来表示一大块（通常是非结构化的）内存区域的计算机术语。

  队列（Queue）：
    一个JavaScript运行时包含了一个待处理消息的消息队列。
    每一个消息都关联着一个用以处理这个消息的回调函数。


宏任务，微任务
  队列中的任务执行完毕之后，才会进行下一任务的执行

js 执行机制：
  JS 执行是单线程的，它是基于事件循环的。事件循环大致分为以下几个步骤：

  （1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。

  （2）主线程之外，还存在一个"任务队列"（task queue）。只要异步任务有了运行结果，就在"任务队列"之中放置一个事件。

  （3）一旦"执行栈"中的所有同步任务执行完毕，系统就会读取"任务队列"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。

  （4）主线程不断重复上面的第三步。

  主线程的执行过程就是一个 tick，而所有的异步结果都是通过 “任务队列” 来调度。 消息队列中存放的是一个个的任务（task）。
  规范中规定 task 分为两大类，分别是 macro task 和 micro task，并且每个 macro task 结束后，都要清空所有的 micro task。
