浏览器为什么要拆分任务：
  由于js是单线程的,只有当上一个任务完成之后才会继续完成下一个任务,如果前一个任务耗时很长，后一个任务就不得不一直等着。

浏览器任务：
  1.宏任务
    1）setTimeout
    2）setInterval
    3）requestAnimationFrame (浏览器中执行有效)
    优先级：
      requestAnimationFrame > setInterval
      requestAnimationFrame > setTimeout
      setInterval和setTimeout 之间的先后，主要是看其在任务大队类中的顺序

  2.微任务
    1）MutationObserver
    2）Promise.then、catch、finally

EventLoop:
  执行栈中的代码看做一个宏任务、执行完毕后执行栈中的微任务、直至微任务执行完毕后，才会开始进行下一个宏任务
  个人觉得在宏任务执行完成后，微任务执行（如果微任务中发现宏任务，则会将该宏任务扔到宏任务队列中），微任务队列执行完毕后，则开启新一轮宏任务执行

  执行栈中的代码：宏任务 > 微任务


nodejs中的EventLoop:
  执行经过以下几个阶段：
    1）定时器阶段：检查定时器阶段
    2）I/O异常回调阶段
    3）轮询阶段：
    4）check阶段：
    5）关闭事件对的回调函数：

  宏任务：
    1）setTimeout
    2）setInterval
    3）setImmediate

  微任务：
    1）process.nextTick
    2）Promise.then、catch、finally

  node 版本 >= 11 其EventLoop和浏览器的表现是一致的
  版本 < 11 定时器出现会将微任务暂时保存，直接去执行新的定时器任务，然后将新的微任务添加得到微任务队列中


浏览器的EventLoop和nodejs 的区别：
  浏览器在处理微任务时候，是在宏任务执行完毕后进行执行的
  nodejs中的微任务是在EventLoop不同阶段间进行执行的
