浏览器：
  缓存：
    强缓存
      1）Expires 过期时间 eg: 􏷡􏲚􏴛􏴓􏱌􏷡􏲚Expire:Fri May 14 2021 16:22:24 GMT
      2）Cache-control 过期时长 eg: Cache-Control:max-age=3600
        private:
          只能浏览器进行缓存、中间代理服务器不能缓存
        no-cache:
          跳过当前强缓存，发送HTTP请求，即直接进入协商缓存阶段
        no-store:
          不进行任何缓存
        s-maxage:
          针对代理服务器的缓存时间

      注意：
        Expires 和 Cache-Control 同时出现，则优先考虑 Cache-Control
        当资源缓存超时了（强缓存失效），则进入协商缓存阶段
    协商缓存
      强缓存失效过后，浏览器在请求头中携带相应的缓存tag来向服务器发请求，有服务器根据这个tag，来决定是否使用缓存
      1）Last-Modified
        最后修改时间。浏览器第一次给服务器发送请求后，服务器会再响应头中加入该字段。
        如果浏览器再次请求，会在请求头中添加If-Modified-Since字段，这个值也就是服务器传来的最后修改时间
          a）请求头中的值小于最后修改时间，说明更新了，返回新的资源，和常规的HTTP请求响应流程一致。
          b）否则返回304，浏览器直接使用缓存
      2）ETag
        服务器根据当前文件的内容，给文件生成的唯一标识。只要内容发生改变，这个值就会改变

    缓存位置
      1）service worker cache (离线缓存)
      2）memory cache （内存缓存）
      3）disk cache  （磁盘缓存）
      4）push cache  （推送缓存）HTTP/2

  流程：
    通过Cache-Control 验证强缓存是否可用
      1）可用，直接使用
      2）否则进入协商缓存，即发送HTTP请求，服务器通过请求头中的If-Modified-Since或者If-None-Match字段检查资源是否更新
        a）更新了，返回资源和200状态码
        b）否则返回304 ，浏览器直接从缓存中获取资源
